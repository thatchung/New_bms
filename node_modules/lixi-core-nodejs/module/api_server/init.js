/** khởi tạo server
 * @param {object} options thông số cấu hình
 * @returns {Server} server
 */

let Joi = require('../joi/_index');
let Koa = require('koa');
let Body = require('koa-body');
let Cors = require('@koa/cors');

// #region [schema]

let schema_option = Joi.object({
    koa: Joi.object().description('instance Koa muốn sử dụng'),
    protocol: Joi.string()
        .description('protocol sử dụng cho api')
        .default('http'),
    host: Joi.string()
        .description('host sử dụng cho api')
        .default('localhost'),
    port: Joi.number()
        .description('port sử dụng cho api')
        .default(8080),
    public_domain: Joi.string().description('public domain để access vào api'),
    main_logger: Joi.object().description('logger chính của server'),
    request_log_enable: Joi.boolean()
        .default(true)
        .description('bật / tắt request log'),
    request_log_host: Joi.string()
        .uri()
        .description('host elastic lưu trữ và ghi nhận request log'),
    request_log_table_name: Joi.string()
        .token()
        .description('bảng elastic lưu trữ và ghi nhận log'),
    show_stack: Joi.boolean()
        .description('hiển thị error stack khi có lỗi?')
        .default(process.env.NODE_ENV !== 'production'),
    workflow: Joi.array()
        .items(Joi.string())
        .description('luồng xử lý cơ bản của các api')
        .default([
            'parse_parameter',
            'run_handler',
            'paging',
            'parse_response'
        ]),
    middlewares: Joi.array()
        .items(
            Joi.object({
                key: Joi.string().required(),
                enable: Joi.boolean(),
                option: Joi.object().pattern(Joi.string(), Joi.any())
            })
        )
        .description('danh sách cấu hình mặc định cho các middleware')
        .default([]),
    errors: Joi.object({
        code: Joi.string()
            .token()
            .required()
            .description('mã lỗi'),
        message: Joi.string()
            .required()
            .description('mô tả lỗi'),
        http_code: Joi.number()
            .description('mã lỗi http')
            .default(500)
    })
        .default('danh sách lỗi')
        .default([]),
    use_body: Joi.boolean()
        .description('có sử dụng thư viện "body" của koa hay không?')
        .default(true),
    use_cors: Joi.boolean()
        .description('có sử dụng thư viện "cors" của koa hay không?')
        .default(true),
    use_base_prepare_middleware: Joi.boolean()
        .description('có sử dụng middleware "prepare" mặc định hay không')
        .default(true),
    use_base_parse_parameter_middleware: Joi.boolean()
        .description(
            'có sử dụng middleware "parse_parameter" mặc định hay không'
        )
        .default(true),
    use_base_parse_encrypt_data_middleware: Joi.boolean()
        .description(
            'có sử dụng middleware "parse_encrypt_data" mặc định hay không'
        )
        .default(true),
    use_base_run_handler_middleware: Joi.boolean()
        .description('có sử dụng middleware "run_handler" mặc định hay không')
        .default(true),
    use_base_paging_middleware: Joi.boolean()
        .description('có sử dụng middleware "paging" mặc định hay không')
        .default(true),
    use_base_parse_response_middleware: Joi.boolean()
        .description(
            'có sử dụng middleware "parse_response" mặc định hay không'
        )
        .default(true),
    use_base_send_response_middleware: Joi.boolean()
        .description('có sử dụng middleware "send_response" mặc định hay không')
        .default(true),
    use_base_error_handler_middleware: Joi.boolean()
        .description('có sử dụng middleware "error_handler" mặc định hay không')
        .default(true),
    use_base_request_log_middleware: Joi.boolean()
        .description('có sử dụng middleware "request_log" mặc định hay không')
        .default(true)
});
schema_option = schema_option.default(schema_option.validate({}).value);

// #endregion

module.exports = expo =>
    (expo.init = function (options = {}) {
        let server = { middlewares: [], apis: [] };

        // #region [ghi nhận option]

        server.options = Joi.validateValue({ options }, schema_option);
        mergeDefaultMiddleware(server.options);
        mergeDefaultError(server.options);

        // #endregion

        // cài đặt các method cho đối tượng server
        require('./instance/_index')(server);

        // #region [cài đặt api]

        if (!server.options.koa) server.koa = new Koa();
        else {
            server.koa = server.options.koa;
            delete server.options.koa;
        }

        if (server.options.use_body) server.koa.use(Body());
        if (server.options.use_cors) server.koa.use(Cors());

        // #endregion

        // #region [cài đặt các middleware cơ bản]

        if (server.options.use_base_prepare_middleware) {
            require('./middleware/prepare')(server);
        }

        if (server.options.use_base_parse_parameter_middleware) {
            require('./middleware/parse_parameter')(server);
        }

        if (server.options.use_base_parse_encrypt_data_middleware) {
            require('./middleware/parse_encrypt_data')(server);
        }

        if (server.options.use_base_run_handler_middleware) {
            require('./middleware/run_handler')(server);
        }

        if (server.options.use_base_paging_middleware) {
            require('./middleware/paging')(server);
        }

        if (server.options.use_base_parse_response_middleware) {
            require('./middleware/parse_response')(server);
        }

        if (server.options.use_base_send_response_middleware) {
            require('./middleware/send_response')(server);
        }

        if (server.options.use_base_error_handler_middleware) {
            require('./middleware/error_handler')(server);
        }

        if (server.options.use_base_request_log_middleware) {
            require('./middleware/request_log')(server);
        }

        // #endregion

        return server;
    });

function mergeDefaultMiddleware(options) {
    if (!options.middlewares.find(x => x.key === 'prepare')) {
        options.middlewares.push({ key: 'prepare', enable: true });
    }

    if (!options.middlewares.find(x => x.key === 'parse_parameter')) {
        options.middlewares.push({ key: 'parse_parameter', enable: true });
    }

    if (!options.middlewares.find(x => x.key === 'parse_encrypt_data')) {
        options.middlewares.push({ key: 'parse_encrypt_data', enable: false });
    }

    if (!options.middlewares.find(x => x.key === 'run_handler')) {
        options.middlewares.push({ key: 'run_handler', enable: true });
    }

    if (!options.middlewares.find(x => x.key === 'paging')) {
        options.middlewares.push({ key: 'paging', enable: false });
    }

    if (!options.middlewares.find(x => x.key === 'parse_response')) {
        options.middlewares.push({ key: 'parse_response', enable: true });
    }

    if (!options.middlewares.find(x => x.key === 'send_response')) {
        options.middlewares.push({ key: 'send_response', enable: true });
    }

    if (!options.middlewares.find(x => x.key === 'request_log')) {
        options.middlewares.push({ key: 'request_log', enable: true });
    }
}

function mergeDefaultError(options) {
    if (!options.errors.find(x => x.code === 'exception')) {
        options.errors.push({
            code: 'exception',
            message: 'exception server error',
            http_code: 500
        });
    }

    if (!options.errors.find(x => x.code === 'bad_request')) {
        options.errors.push({
            code: 'bad_request',
            message: 'bad request or invalid parameter',
            http_code: 400
        });
    }

    if (!options.errors.find(x => x.code === 'bad_response')) {
        options.errors.push({
            code: 'bad_response',
            message: 'bad resposne from server',
            http_code: 500
        });
    }
}
