/** đăng ký API end-point
 * @param {string} path path của end-point
 * @param {string} method restful method của end-point
 * @param {string} summary mô tả ngắn gọn về end-point
 * @param {string} description mô tả chi tiết về end-point
 * @param {string} tags danh sách tags của end-point
 * @param {object} parameter danh sách tham số đầu vào
 * @param {object} response danh sách tham số đầu ra
 * @param {array[object]} middlewares danh sách middleware sử dụng
 * @param {array[string]} workflow danh sách workflow sử dụng
 * @param {function} handler hàm xử lý (async) của end-point
 * @param {boolean} unsafe bỏ qua các kiểm tra khi đăng ký end-point
 */

let Joi = require('../../joi/_index');
let DefaultApiParameterLocation = require('../../helper/default_api_parameter_location');
let DeepValidateApiParameter = require('../../helper/deep_validate_api_parameter');
let DeepValidateApiResponse = require('../../helper/deep_validate_api_response');
let DefaultResponseField = require('../../helper/default_response_field');
let Callsite = require('callsite');

module.exports = server =>
    (server.registerEndpoint = function({
        filename,
        version,
        path,
        method,
        summary,
        description,
        tags,
        parameter,
        response,
        middlewares,
        workflow,
        handler,
        error_handler,
        success_meta_handler,
        error_meta_handler,
        unsafe
    } = {}) {
        // #region [validate]

        version = Joi.validateValue({ version }, Joi.string().default(''));

        path = Joi.validateValue(
            { path },
            Joi.string()
                .required()
                .regex(/^\//, '"must starts with /"')
        );
        if (path.startsWith('/lixidevops'))
            throw Error('cannot overwrite Lixi Dev-Ops APIs');

        method = Joi.validateValue(
            { method },
            Joi.string()
                .required()
                .valid('GET', 'POST', 'PUT', 'DELETE')
        );

        let key;
        if (version) key = method + path + '_' + version;
        else key = method + path;
        key = key.replace(/\//g, '_').toLowerCase();

        if (server.apis.find(x => x.key === key))
            throw Error(`end-point "${key}" is duplicated`);

        summary = Joi.validateValue({ summary }, Joi.string());

        description = Joi.validateValue({ description }, Joi.string());

        tags = Joi.validateValue(
            { tags },
            Joi.array()
                .items(Joi.string())
                .unique()
        );

        parameter = Joi.validateValue(
            { parameter },
            Joi.object()
                .pattern(Joi.string(), Joi.object().schema())
                .default({})
        );

        response = Joi.validateValue({ response }, Joi.object().schema());

        middlewares = Joi.validateValue(
            { middlewares },
            Joi.array()
                .items(
                    Joi.object({
                        key: Joi.string()
                            .required()
                            .valid(server.middlewares.map(x => x.key)),
                        enable: Joi.boolean(),
                        option: Joi.object().pattern(Joi.string(), Joi.any())
                    })
                )
                .default([])
        );

        for (let middleware of server.options.middlewares) {
            if (middlewares.find(x => x.key === middleware.key)) continue;
            middlewares.push(middleware);
        }

        workflow = Joi.validateValue(
            { workflow },
            Joi.array()
                .items(Joi.string().valid(server.middlewares.map(x => x.key)))
                .has(
                    Joi.string()
                        .valid('parse_parameter')
                        .label('parse_parameter')
                )
                .has(
                    Joi.string()
                        .valid('run_handler')
                        .label('run_handler')
                )
                .has(
                    Joi.string()
                        .valid('parse_response')
                        .label('parse_response')
                )
                .default(server.options.workflow)
        );

        handler = Joi.validateValue({ handler }, Joi.func().maxArity(1));

        error_handler = Joi.validateValue(
            { error_handler },
            Joi.func().maxArity(1)
        );

        success_meta_handler = Joi.validateValue(
            { success_meta_handler },
            Joi.func().maxArity(1)
        );

        error_meta_handler = Joi.validateValue(
            { error_meta_handler },
            Joi.func().maxArity(1)
        );

        // #endregion

        // #region [khởi tạo api]

        let api = {
            file: filename || Callsite()[1].getFileName(),
            key,
            version,
            path,
            method,
            summary,
            description,
            tags,
            parameter,
            response,
            middlewares,
            workflow,
            handler,
            error_handler,
            success_meta_handler,
            error_meta_handler
        };

        if (api.version) api.endpoint = '/' + api.version + api.path;
        else api.endpoint = api.path;

        api.logger = server.logger || server.options.main_logger;

        // #endregion

        // #region [tạo route path để so sánh]

        let path_regex = api.endpoint;

        if (path_regex.includes(':')) {
            path_regex = path_regex.split('/');
            for (let i = 0; i < path_regex.length; i++) {
                if (path_regex[i].startsWith(':')) {
                    path_regex[i] =
                        '(?<' + path_regex[i].substr(1) + '>\\w+)(\\?.+)?';
                }
            }
            path_regex = path_regex.join('/');
        }

        api.path_regex = new RegExp('^' + path_regex + '$');

        // #endregion

        // #region [xử lý các middleware]

        for (let middleware of middlewares) {
            let m = server.middlewares.find(x => x.key === middleware.key);
            if (!m) throw Error(`middleware is not found '${middleware.key}'`);

            if (middleware.enable === undefined)
                middleware.enable = server.options.middlewares.find(
                    x => x.key === middleware.key
                ).enable;

            if (!middleware.enable) continue;

            // #region [xử lý tham số]

            middleware.option_value = {};
            for (let key in m.option) {
                if (!m.option.hasOwnProperty(key)) continue;
                middleware.option_value[key] = Joi.validateValue(
                    {
                        [key]: middleware.option
                            ? middleware.option[key]
                            : undefined
                    },
                    m.option[key]
                );
            }

            // #endregion

            // #region [chạy setup của các]

            if (!middleware.enable || !m.setup) continue;
            m.setup({ server, api, option: middleware.option_value });

            // #endregion
        }

        // #endregion

        // #region [deep validate parameter]

        for (let key in parameter) {
            if (!parameter.hasOwnProperty(key)) continue;

            let parameterSchema = parameter[key].describe();
            let location_meta = parameterSchema.meta
                ? parameterSchema.meta.find(x => x.hasOwnProperty('location'))
                : undefined;

            location_meta = Joi.validateValue(
                { location_meta },
                Joi.object()
                    .keys({
                        location: Joi.string()
                            .valid('path', 'query', 'header', 'body')
                            .default(DefaultApiParameterLocation({ method }))
                            .label(key + ':location')
                    })
                    .unknown(true)
                    .default({
                        location: DefaultApiParameterLocation({ method })
                    })
            );

            if (!unsafe) {
                DeepValidateApiParameter({
                    path: key,
                    parameter: parameterSchema,
                    location: location_meta.location
                });
            }
        }

        // #endregion

        // #region [deep validate response]

        if (response) {
            let responseSchema = response.describe();
            if (!unsafe)
                DeepValidateApiResponse({
                    path: 'response',
                    response: responseSchema
                });
            // DefaultResponseField({ response });
        }

        // #endregion

        // #region [ghi nhận end-point]

        server.apis.push(api);

        // #endregion

        return api;
    });
