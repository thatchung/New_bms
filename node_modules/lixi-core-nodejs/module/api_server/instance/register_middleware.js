/** đăng ký API middleware
 * @param {string} key mã định danh
 * @param {string} summary mô tả ngắn gọn về middleware
 * @param {string} description mô tả chi tiết về middleware
 * @param {function} handler hàm xử lý (async) của middleware
 */

let Joi = require('../../joi/_index');
let deepValidateMiddlewareOption = require('../../helper/deep_validate_middleware_option');

module.exports = server =>
    (server.registerMiddleware = function({
        key,
        summary,
        description,
        option,
        setup,
        handler
    } = {}) {
        // #region [validate]

        key = Joi.validateValue(
            { key },
            Joi.string()
                .required()
                .regex(/^[a-z_0-9.]+$/)
        );
        if (server.middlewares.find(x => x.key === key)) {
            throw Error(`middleware "${key}" is duplicated`);
        }

        summary = Joi.validateValue({ summary }, Joi.string());

        description = Joi.validateValue({ description }, Joi.string());

        option = Joi.validateValue(
            { option },
            Joi.object()
                .pattern(Joi.string(), Joi.object().schema())
                .default({})
        );

        setup = Joi.validateValue({ setup }, Joi.func().maxArity(1));

        handler = Joi.validateValue({ handler }, Joi.func().maxArity(1));

        // #endregion

        // #region [deep validate option]

        for (let key in option) {
            if (!option.hasOwnProperty(key)) continue;

            deepValidateMiddlewareOption({
                path: key,
                option: option[key].describe()
            });
        }

        // #endregion

        // #region [ghi nhận end-point]

        let middleware = {
            key,
            summary,
            description,
            option,
            setup,
            handler
        };

        server.middlewares.push(middleware);

        // #endregion

        return middleware;
    });
