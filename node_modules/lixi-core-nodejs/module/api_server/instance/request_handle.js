/** xử lý request */

let Util = require('../../util/_index');

module.exports = server =>
    (server.requestHandle = async function({ request, response } = {}) {
        // #region [chuẩn bị context]

        let context = {
            http_status_code: null,
            meta: {
                success: undefined,
                request_uuid: Util.randomUuid(),
                request_time: new Date()
            },
            error: null,
            args: {},
            result: {}
        };

        // #endregion

        // #region [lấy end-point]

        let path =
            request.url.indexOf('?') > -1
                ? request.url.substr(0, request.url.indexOf('?'))
                : request.url;

        // #endregion

        // #region [devops routes]

        if (path.startsWith('/lixidevops')) {
            require('../devops/_index')({ path, request, response });
            return;
        }

        // #endregion

        // #region [lấy api]

        let api = server.apis.find(
            x => x.method === request.method && x.path_regex.test(path)
        );

        if (!api) {
            context.meta.response_time = new Date();
            context.http_status_code = 404;

            endHandle({ server, request, response, api, context });
            return;
        }

        // #endregion

        // #region [xử lý theo workflow]

        for (let key of api.workflow) {
            if (
                [
                    'prepare',
                    'error_handler',
                    'send_response',
                    'request_log'
                ].includes(key)
            )
                continue;

            try {
                let m = api.middlewares.find(x => x.key === key);
                if (!m.enable) continue;

                let middleware = server.middlewares.find(x => x.key === key);
                if (!middleware.handler) continue;

                await middleware.handler({
                    server,
                    request,
                    response,
                    api,
                    context,
                    option: m.option_value
                });
            } catch (e) {
                await server.middlewares
                    .find(x => x.key === 'error_handler')
                    .handler({
                        server,
                        request,
                        response,
                        api,
                        context,
                        exception: e
                    });

                context.meta.response_time = new Date();
                endHandle({ server, request, response, api, context });
                return;
            }
        }

        context.meta.response_time = new Date();
        endHandle({ server, request, response, api, context });

        // #endregion
    });

async function endHandle({ server, request, response, api, context }) {
    await server.middlewares
        .find(x => x.key === 'send_response')
        .handler({
            server,
            request,
            response,
            api,
            context
        });

    await server.middlewares
        .find(x => x.key === 'request_log')
        .handler({
            server,
            request,
            response,
            api,
            context
        });
}
