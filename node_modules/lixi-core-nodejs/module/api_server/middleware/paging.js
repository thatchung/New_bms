let Joi = require('../../joi/_index');

module.exports = server =>
    server.registerMiddleware({
        key: 'paging',
        summary: 'xử lý phân trang',
        setup: function({ api }) {
            api.parameter.page = Joi.number()
                .integer()
                .default(1)
                .min(1)
                .description('vị trí trang dữ liệu');
            api.parameter.page_size = Joi.number()
                .integer()
                .default(10)
                .min(1)
                .max(1000)
                .description('kích thước trang dữ liệu');
        },
        handler: async function({ context, server }) {
            try {
                context.result = Joi.validateValue(
                    { result: context.result },
                    Joi.object({
                        total: Joi.number()
                            .required()
                            .min(0),
                        items: Joi.array()
                            .required()
                            .items(Joi.any())
                    }).default({ total: 0, items: [] })
                );
            } catch (e) {
                throw server.makeError({
                    code: 'bad_response',
                    // eslint-disable-next-line max-len
                    message:
                        'paging result is invalid, must be object type with "total" and "items" field'
                });
            }

            context.meta.total = context.result.total;
            context.meta.page = context.args.page;
            context.meta.page_size = context.args.page_size;
            context.meta.page_count = Math.ceil(
                context.meta.total / context.meta.page_size
            );
            context.meta.can_next =
                context.meta.page_count > 0 &&
                context.meta.page < context.meta.page_count;
            context.meta.can_prev =
                context.meta.page_count > 0 && context.meta.page > 1;

            context.result = context.result.items;
        }
    });
