let Joi = require('../../joi/_index');
let { HttpError } = require('../../err/_index');
let { verifySignatureRSA, decryptRSA } = require('../../util/_index');

module.exports = server =>
    server.registerMiddleware({
        key: 'parse_encrypt_data',
        summary: 'Parse dữ liệu mã hoá',
        option: {
            public_key_handler: Joi.func(),
            private_key_handler: Joi.func(),
            parse_handler: Joi.func()
        },
        // eslint-disable-next-line space-before-function-paren
        handler: async function ({ request, option }) {
            let publicKey = await option.public_key_handler({});
            let privateKey = await option.private_key_handler({});

            let data;
            if (option.parse_handler) {
                data = option.parse_handler({
                    encrypted_data: request.body.data,
                    header: request.ctx.header
                });
            } else {
                data = request.body.data;
            }

            let signature = request.body.signature;
            let verify = verifySignatureRSA({ publicKey, signature, data });
            if (verify) {
                let decrypt = decryptRSA({ private_key: privateKey, data: request.body.data });
                if (decrypt) {
                    request.body = Object.assign(request.body, decrypt);
                } else {
                    throw new HttpError({
                        code: 'exception',
                        message: 'Can not decrypt data',
                        http_code: 400
                    });
                }
            } else {
                throw new HttpError({
                    code: 'exception',
                    message: 'Can not verify signature',
                    http_code: 400
                });
            }
        }
    });
