let Moment = require('../../moment/_index');

module.exports = server =>
    server.registerMiddleware({
        key: 'send_response',
        summary: 'thực hiện xử lý response',
        handler: async function({ context, server, request, response, api }) {
            context.meta.execution_time =
                context.meta.response_time - context.meta.request_time;

            if (context.http_status_code === 404 || context.error) {
                await sendErrorResponse({
                    context,
                    server,
                    request,
                    response,
                    api
                });
                return;
            }

            await sendSuccessResponse({
                context,
                server,
                request,
                response,
                api
            });
        }
    });

function getResponseOption({ api }) {
    return api.middlewares.find(x => x.key === 'prepare').option_value;
}

async function sendErrorResponse({ context, server, request, response, api }) {
    // #region [lấy thông tin]

    let meta_field = 'meta';
    let error_field = 'error';

    if (api) {
        let option = getResponseOption({ api });
        meta_field = option.meta_field;
        error_field = option.error_field;
    }

    // #endregion

    // #region [chuẩn bị meta]

    let meta = {
        success: false,
        request_uuid: context.meta.request_uuid,
        request_time: Moment(context.meta.request_time).valueOf(),
        response_time: Moment(context.meta.response_time).valueOf(),
        execution_time: context.meta.execution_time
    };

    if (api && api.error_meta_handler)
        meta = await api.error_meta_handler({
            server,
            api,
            request,
            response,
            request_uuid: context.request_uuid,
            meta: meta,
            args: context.args
        });

    // #endregion

    // #region [chuẩn bị error]

    let error;
    if (context.http_status_code === 404)
        error = {
            code: 'endpoint_not_found',
            message: 'end-point not found'
        };
    else error = context.error;

    if (api && api.error_handler)
        error = await api.error_handler({
            server,
            api,
            request,
            response,
            request_uuid: context.request_uuid,
            meta: meta,
            args: context.args,
            error
        });

    // #endregion

    response.body = {
        [meta_field]: meta,
        [error_field]: error
    };

    response.status = context.http_status_code;
}

async function sendSuccessResponse({
    context,
    server,
    request,
    response,
    api
}) {
    let { meta_field, data_field } = getResponseOption({ api });

    // #region [chuẩn bị meta]

    let meta = {
        success: true,
        request_uuid: context.meta.request_uuid,
        request_time: Moment(context.meta.request_time).valueOf(),
        response_time: Moment(context.meta.response_time).valueOf(),
        execution_time: context.meta.execution_time
    };
    meta = Object.assign({}, context.meta, meta);

    if (api.success_meta_handler)
        meta = await api.success_meta_handler({
            server,
            api,
            request,
            response,
            request_uuid: context.request_uuid,
            meta: meta,
            args: context.args
        });

    // #endregion

    response.body = {
        [meta_field]: meta,
        [data_field]: context.result
    };

    response.status = 200;
}
