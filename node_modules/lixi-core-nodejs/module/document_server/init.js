/** khởi tạo document
 * @param {object} options thông số cấu hình
 * @returns {Document} document
 */

let Joi = require('../joi/_index');
let Path = require('path');
let Express = require('express');
let BasicAuth = require('basic-auth');
// let SendWikiDetail = require('./util/express_wiki_detail');

// #region [schema]

let schema_option = Joi.object({
    port: Joi.number()
        .description('port sử dụng cho document')
        .default(8081),
    auth: Joi.object({
        mode: Joi.string()
            .valid('none', 'basic')
            .required(),
        list_basic_account: Joi.array()
            .items(
                Joi.object({
                    username: Joi.string()
                        .description('tên đăng nhập')
                        .required(),
                    password: Joi.string()
                        .description('mật khẩu')
                        .required()
                })
            )
            .description('danh sách tài khoản dùng cho basic auth')
    })
        .description('cấu hình bảo mật document')
        .default({ mode: 'none' }),
    require_filters: Joi.array()
        .items(Joi.func().maxArity(1))
        .description('danh sách file filter trong khi đọc code tìm require')
        .default([])
});
schema_option = schema_option.default(schema_option.validate({}).value);

// #endregion

module.exports = expo =>
    (expo.init = function(options = {}) {
        let document = { info: {} };
        document.info.modules = [];

        // ghi nhận option
        document.options = Joi.validateValue({ options }, schema_option);
        document.info.source_code_link =  'https://bitbucket.org/';

        // cài đặt các method cho đối tượng document
        require('./instance/_index')(document);

        // khởi tạo express
        document.express = Express();

        // #region [cài đặt auth]

        if (document.options.auth.mode === 'basic') {
            document.express.use((request, response, next) => {
                middlewareBasicAuth({ document, request, response, next });
            });
        }

        // #endregion

        // #region [cài đặt end-point]

        // document.express.use(
        //     '/',
        //     Express.static(Path.join(__dirname, './dist/document-ui'))
        // );

        document.express.use(
            '/',
            Express.static(Path.join(__dirname, './dist/swagger-ui'))
        );

        // document.express.use('/document.json', (req, res) =>
        //     res.send(document.info)
        // );

        // document.express.use('/wiki/:key.md', (req, res) =>
        //     SendWikiDetail({ req, res, document })
        // );

        document.express.use('/data.json', async (req, res) => {
            try {
                let result = await document.swagger();
                res.send(result);
            } catch (e) {
                res.status(500);
                res.send(e.message);
                throw e;
            }
        });

        // document.express.get('/*', (req, res) =>
        //     res.sendFile(__dirname + '/dist/document-ui/index.html')
        // );

        // #endregion

        return document;
    });

function middlewareBasicAuth({ document, request, response, next }) {
    let account = BasicAuth(request);
    let is_valid = !!document.options.auth.list_basic_account.find(x => {
        return (
            account &&
            x.username === account.name &&
            x.password === account.pass
        );
    });

    if (!is_valid) {
        response.set('WWW-Authenticate', 'Basic realm="example"');
        return response.status(401).send();
    }

    return next();
}
