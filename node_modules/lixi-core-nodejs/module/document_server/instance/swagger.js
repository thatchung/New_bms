/** phát sinh dữ liệu cho swagger-ui */

let defaultApiParameterLocation = require('../../helper/default_api_parameter_location');
let Joi2Swagger = require('joi-to-swagger');

module.exports = document =>
    (document.swagger = function() {
        if (!this.api_server) throw Error('missing api server');

        let swagger = {
            swagger: '2.0',
            info: {},
            paths: {}
        };

        swagger.info.title = this.info.name
            ? this.info.name + ' - Swagger'
            : 'API Swagger';
        if (this.api_server.options.public_domain) {
            swagger.host = this.api_server.options.public_domain;
        } else {
            swagger.host = this.api_server.options.host;
            if (this.api_server.options.port)
                swagger.host += ':' + this.api_server.options.port;
        }
        swagger.basePath = '/';
        swagger.schemes = [this.api_server.options.protocol];

        for (let api of this.api_server.apis) {
            // #region [create end-point]

            let path = api.endpoint;
            if (path.includes(':')) {
                path = path.split('/');
                for (let i = 0; i < path.length; i++) {
                    if (path[i].startsWith(':')) {
                        path[i] = '{' + path[i].substr(1) + '}';
                    }
                }
                path = path.join('/');
            }

            if (!swagger.paths.hasOwnProperty(path)) swagger.paths[path] = {};
            if (!swagger.paths[path].hasOwnProperty(api.method.toLowerCase())) {
                swagger.paths[path][api.method.toLowerCase()] = {};
            }

            let endpoint = swagger.paths[path][api.method.toLowerCase()];

            // #endregion

            // #region [basic info]

            endpoint.summary = api.summary;
            endpoint.description = api.description;
            endpoint.tags = api.tags;
            endpoint.consumes = ['application/json'];
            endpoint.produces = ['application/json'];

            // #endregion

            // #region [parameter]

            endpoint.parameters = [];
            let body = {
                name: 'body',
                in: 'body',
                required: true,
                schema: {
                    type: 'object',
                    required: [],
                    properties: {}
                }
            };

            for (let key in api.parameter) {
                if (!api.parameter.hasOwnProperty(key)) continue;
                let schema = api.parameter[key].describe();

                let location = schema.meta
                    ? schema.meta.find(x => x.hasOwnProperty('location'))
                    : undefined;
                if (location) location = location.location;
                else
                    location = defaultApiParameterLocation({
                        method: api.method
                    });

                if (['path', 'query', 'header'].includes(location)) {
                    let parameter = Joi2Swagger(api.parameter[key]).swagger;
                    if (schema.flags) parameter.default = schema.flags.default;
                    parameter.example = parameter.default;
                    parameter.name = key;
                    parameter.in = location;

                    if (schema.flags && schema.flags.presence === 'required')
                        parameter.required = true;
                    endpoint.parameters.push(parameter);
                } else if (location === 'body') {
                    let parameter = Joi2Swagger(api.parameter[key]).swagger;
                    if (schema.flags) parameter.default = schema.flags.default;
                    parameter.example = parameter.default;

                    body.schema.properties[key] = parameter;
                    if (schema.flags && schema.flags.presence === 'required') {
                        body.schema.required.push(key);
                    }
                }
            }

            if (Object.keys(body.schema.properties).length > 0) {
                endpoint.parameters.push(body);
            }

            // #endregion

            // #region [lấy thông tin các field]

            let {
                meta_field,
                data_field,
                error_field
            } = api.middlewares.find(x => x.key === 'prepare').option_value;

            // #endregion

            // #region [success response]

            let successResponse = {};
            endpoint.responses = {
                '200': {
                    schema: {
                        type: 'object',
                        properties: successResponse
                    }
                }
            };

            successResponse[meta_field] = {
                type: 'object',
                description: 'các thông tin mở rộng',
                properties: {
                    success: {
                        type: 'boolean',
                        description:
                            'phiên request được xử lý thành công hay thất bại?',
                        default: true
                    },
                    request_uuid: {
                        type: 'string',
                        format: 'uuid',
                        description: 'mã định danh phiên request'
                    },
                    request_time: {
                        type: 'number',
                        format: 'integer',
                        description: 'thời gian tiếp nhận request (timestamp)'
                    },
                    response_time: {
                        type: 'number',
                        format: 'integer',
                        description: 'thời gian phản hồi request (timestamp)'
                    },
                    execution_time: {
                        type: 'number',
                        format: 'float',
                        // eslint-disable-next-line max-len
                        description:
                            'thời gian server tiến hành xử lý của phiên request (đơn vị millisecond)'
                    }
                }
            };

            if (api.response) {
                if (api.response.describe().type === 'any')
                    successResponse[data_field] = {
                        type: 'any'
                    };
                else
                    successResponse[data_field] = Joi2Swagger(
                        api.response
                    ).swagger;

                successResponse[data_field].description = 'kết quả xử lý';
            }

            // #endregion

            // #region [error response]

            endpoint.responses['error'] = {
                schema: {
                    type: 'object',
                    properties: {
                        [meta_field]: {
                            type: 'object',
                            description: 'các thông tin mở rộng',
                            properties: {
                                success: {
                                    type: 'boolean',
                                    description:
                                        'phiên request được xử lý thành công hay thất bại?',
                                    default: false
                                },
                                request_uuid: {
                                    type: 'string',
                                    format: 'uuid',
                                    description: 'mã định danh phiên request'
                                },
                                request_time: {
                                    type: 'number',
                                    format: 'integer',
                                    description:
                                        'thời gian tiếp nhận request (timestamp)'
                                },
                                response_time: {
                                    type: 'number',
                                    format: 'integer',
                                    description:
                                        'thời gian phản hồi request (timestamp)'
                                },
                                execution_time: {
                                    type: 'number',
                                    format: 'float',
                                    // eslint-disable-next-line max-len
                                    description:
                                        'thời gian server tiến hành xử lý của phiên request (đơn vị millisecond)'
                                }
                            }
                        },
                        [error_field]: {
                            type: 'object',
                            description: 'thông tin chi tiết lỗi',
                            properties: {
                                code: {
                                    type: 'string',
                                    description: 'mã định danh lỗi'
                                },
                                message: {
                                    type: 'string',
                                    description: 'mô tả lỗi'
                                },
                                data: {
                                    type: 'any',
                                    description: 'dữ liệu hỗ trợ xử lý lỗi lỗi'
                                }
                            }
                        }
                    }
                }
            };

            if (this.api_server.options.show_stack) {
                endpoint.responses['error'].schema.properties[
                    error_field
                ].properties.stack = {
                    type: 'any',
                    description: 'stack hỗ trợ truy vết lỗi'
                };
            }

            // #endregion
        }

        return swagger;
    });
