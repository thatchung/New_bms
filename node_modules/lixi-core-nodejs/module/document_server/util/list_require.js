let GetModuleOfFile = require('./get_module_of_file');
let StripComment = require('strip-comments');
let Path = require('path');
let Fs = require('fs');

module.exports = function ({
    aliases,
    document,
    file,
    remove_external_endpont = false
}) {
    if (!Fs.existsSync(file)) return [];
    let file_content = Fs.readFileSync(file, 'utf8');
    file_content = StripComment(file_content);

    // #region [nạp các require & endpoint]

    let result = [].concat(
        listRequire({
            aliases,
            document,
            file,
            file_content
        }),
        listEndpoint({
            aliases,
            document,
            file,
            file_content,
            remove_external_endpont
        })
    );

    // #endregion

    // skip xử lý nếu có thể
    if (result.length === 0) return [];

    // #region [lọc các file theo filter chỉ định]

    if (document.options.require_filters.length > 0) {
        for (let filter of document.options.require_filters)
            result = result.filter(filter);
    }

    // #endregion

    return result;
};

function listRequire({ aliases, document, file, file_content }) {
    // #region [tìm các file được require]

    let list_require = file_content.match(
        /((let |let )+\w*( )?=( )?)?require\('[@.][\.\/\w]+'\)/g
    );

    if (!list_require || list_require.length === 0) return [];

    // #endregion

    // #region [chuẩn hóa lại path của file]

    list_require = list_require.map(x => {
        // #region [lấy thông tin]

        let item = x.replace(/(let |let )/g, '');
        let variable_key;
        let path;
        if (item.includes('=')) {
            variable_key = item.split('=')[0].trim();
            path = item.split('=')[1].trim();
        } else {
            variable_key = null;
            path = item.trim();
        }

        // #endregion

        // #region [chuẩn hóa đường dẫn]

        path = path.substring(9, path.length - 2);
        if (path.startsWith('.')) path = Path.join(Path.dirname(file), path);

        for (let key in aliases) {
            if (!aliases.hasOwnProperty(key)) continue;
            path = path.replace(key, aliases[key]);
        }

        if (!Path.extname(path) && !Fs.existsSync(path)) {
            if (Fs.existsSync(path + '.js')) path += '.js';
            else path += '/index.js';
        }

        // #endregion

        let modu = GetModuleOfFile({ aliases, document, file: path });

        return {
            variable_key,
            protocol: 'file',
            file: path,
            module: modu ? modu.name : null
        };
    });

    // #endregion

    // #region [loại bỏ các file nằm ngoài module]

    list_require = list_require.filter(x => !!x.module);

    // #endregion

    return list_require;
}

function listEndpoint({
    aliases,
    document,
    file,
    file_content,
    remove_external_endpont
}) {
    // #region [tìm module trực thuộc]

    let modu = document.info.modules.find(x => file.startsWith(x.dir + '/'));
    if (!modu) return [];

    // #endregion

    // #region [tìm các endpoint được gọi]

    let list_endpoint = file_content.match(
        /(let |let )+\w*( )?=( )?\w*.getEndpoint\('.+'\)/g
    );

    if (!list_endpoint || list_endpoint.length === 0) return [];

    // #endregion

    // #region [load các endpoint]

    list_endpoint = list_endpoint.map(x => {
        let item = x.replace(/(let |let )/g, '');
        let variable_key;
        let endpoint_key;
        if (item.includes('=')) {
            variable_key = item.split('=')[0].trim();
            endpoint_key = item.split('=')[1].trim();
        } else {
            variable_key = null;
            endpoint_key = item.trim();
        }

        endpoint_key = endpoint_key.substring(
            endpoint_key.indexOf('.getEndpoint') + 14,
            endpoint_key.length - 2
        );
        let endpoint = modu.hub_endpoints.find(x => x.key === endpoint_key);

        return {
            variable_key,
            endpoint
        };
    });

    // #endregion

    // #region [chuẩn hóa lại danh sách]

    list_endpoint = list_endpoint.map(x => {
        if (x.endpoint) {
            if (x.endpoint.protocol === 'rest') {
                return {
                    variable_key: x.variable_key,
                    protocol: 'rest',
                    host: x.endpoint.host,
                    method: x.endpoint.method,
                    path: x.endpoint.path
                };
            } else {
                // #region [chuẩn hóa đường dẫn]

                let path = x.endpoint.file;

                for (let key in aliases) {
                    if (!aliases.hasOwnProperty(key)) continue;
                    path = path.replace(key, aliases[key]);
                }

                if (!Path.extname(path) && !Fs.existsSync(path)) {
                    if (Fs.existsSync(path + '.js')) path += '.js';
                    else path += '/index.js';
                }

                // #endregion

                let modu = GetModuleOfFile({ aliases, document, file: path });

                return {
                    variable_key: x.variable_key,
                    protocol: 'file',
                    file: path,
                    module: modu ? modu.name : null
                };
            }
        }
    });

    // #endregion

    // #region [loại bỏ các endpoint file không nằm trong module]

    list_endpoint = list_endpoint.filter(
        x => x && (x.protocol !== 'file' || !!x.module)
    );

    // #endregion

    // #region [loại bỏ các endpoint ngoài]

    if (remove_external_endpont) {
        list_endpoint = list_endpoint.filter(
            x => x && !['rest'].includes(x.protocol)
        );
    }

    // #endregion

    return list_endpoint;
}
