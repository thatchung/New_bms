let CalculateCodeSize = require('./calculate_code_size');
let DefaultApiParameterLocation = require('../../helper/default_api_parameter_location');
let Joi2Swagger = require('joi-to-swagger');

module.exports = function({ aliases, document }) {
    for (let modu of document.info.modules) {
        let list_api = modu.apis;
        modu.apis = [];

        for (let a of list_api) {
            // #region [find or insert]

            let api = document.info.apis.find(x => x.key === a.key);
            if (!api) {
                api = { key: a.key };
                document.info.apis.push(api);
            }

            // #endregion

            // #region [set basic infomation]

            api.file = a.file;
            api.endpoint = a.endpoint;
            api.version = a.version;
            api.method = a.method;
            api.path = a.path;
            api.summary = a.summary;
            api.description = a.description;
            api.tags = a.tags;
            api.middlewares = a.middlewares
                .filter(x => x.enable)
                .map(x => ({ key: x.key, option_value: x.option_value }));
            api.code_size = CalculateCodeSize({ file: api.file });

            // #endregion

            // #region [parameters]

            api.parameters = [];
            for (let key in a.parameter) {
                if (!a.parameter.hasOwnProperty(key)) continue;
                let schema = a.parameter[key].describe();

                let location = schema.meta
                    ? schema.meta.find(x => x.hasOwnProperty('location'))
                    : undefined;

                if (location) location = location.location;
                else
                    location = DefaultApiParameterLocation({
                        method: api.method
                    });

                let param = Joi2Swagger(a.parameter[key]).swagger;
                param.key = key;
                param.location = location;
                if (schema.flags) param.default = schema.flags.default;
                param.required =
                    schema.flags && schema.flags.presence === 'required';

                api.parameters.push(param);
            }

            // #endregion

            // #region [response]

            if (a.response) api.response = Joi2Swagger(a.response).swagger;

            // #endregion

            // #region [mapping api with module]

            if (!modu.apis.includes(api.key)) modu.apis.push(api.key);

            // #endregion
        }
    }
};
