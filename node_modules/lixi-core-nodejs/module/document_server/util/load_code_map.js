let GetInfoOfFile = require('./get_info_of_file');
let ListRequire = require('./list_require');
let Fs = require('fs');

module.exports = function({ aliases, document }) {
    for (let api of document.info.apis) {
        api.code_map = { nodes: [], edges: [] };
        buildMap({
            aliases,
            document,
            file: api.file,
            map: api.code_map
        });
    }

    for (let biz of document.info.bizs) {
        biz.code_map = { nodes: [], edges: [] };
        buildMap({
            aliases,
            document,
            file: biz.file,
            map: biz.code_map
        });
    }

    for (let model of document.info.models) {
        model.code_map = { nodes: [], edges: [] };
        buildMap({
            aliases,
            document,
            file: model.file,
            map: model.code_map
        });
    }
};

function buildMap({
    aliases,
    document,
    file,
    map,
    node_request,
    require_request
}) {
    if (!Fs.existsSync(file)) return;

    // #region [xác định thông tin]

    let info = GetInfoOfFile({ aliases, document, file });
    if (!info) return;

    // #endregion

    // #region [ghi nhận module]

    let node_module = map.nodes.find(x => x.key === 'module_' + info.module);

    if (!node_module) {
        node_module = {
            key: 'module_' + info.module,
            type: 'module',
            list_child: []
        };
        map.nodes.push(node_module);
    }

    node_module.name = info.module;

    // #endregion

    // #region [ghi nhận folder]

    let node_folder;
    if (info.type) {
        node_folder = map.nodes.find(
            x => x.key === 'folder_' + info.module + '_' + info.type
        );

        if (!node_folder) {
            node_folder = {
                key: 'folder_' + info.module + '_' + info.type,
                type: 'folder',
                list_child: []
            };
            map.nodes.push(node_folder);
        }

        node_folder.parent = node_module.key;
        node_folder.name = info.type;

        node_module.list_child.push(node_folder.key);
    }

    // #endregion

    // #region [ghi nhận file]

    let node_file = map.nodes.find(x => x.key === 'file_' + info.key);

    if (!node_file) {
        node_file = {
            key: 'file_' + info.key,
            type: 'file',
            list_child: []
        };
        map.nodes.push(node_file);
    }

    node_file.parent = node_folder ? node_folder.key : node_module.key;
    node_file.name = info.name;

    if (node_folder) node_folder.list_child.push(node_file.key);
    else node_module.list_child.push(node_file.key);

    // #endregion

    // #region [điểm khởi đầu]

    let node_start = map.nodes.find(x => x.key === 'start');
    if (!node_start) {
        node_start = {
            key: 'start',
            type: 'start',
            list_child: [],
            name: 'start'
        };
        map.nodes.push(node_start);
        map.edges.push({ from: node_start.key, to: node_file.key });
    }

    // #endregion

    // #region [liên kết]

    if (node_request) {
        map.edges.push({
            from: node_request.key,
            to: node_file.key,
            text: require_request.variable_key
        });
    }

    // #endregion

    // #region [recursion]

    let list_require = ListRequire({ aliases, document, file });
    for (let require of list_require) {
        buildMap({
            aliases,
            document,
            file: require.file,
            map,
            node_request: node_file,
            require_request: require
        });
    }

    // #endregion
}
