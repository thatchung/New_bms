let CalculateCodeSize = require('./calculate_code_size');

module.exports = function({ aliases, document }) {
    for (let modu of document.info.modules) {
        let list_model = modu.models;
        modu.models = [];

        for (let m of list_model) {
            // #region [find or insert]

            let model = document.info.models.find(x => x.name === m.name);
            if (!model) {
                model = {};
                document.info.models.push(model);
            }

            // #endregion

            // #region [set basic infomation]

            model.file = m.file;
            model.name = m.name;
            model.description = m.description;
            model.code_size = CalculateCodeSize({ file: model.file });
            model.field_link = m.field_link;

            // #endregion

            // #region [mapping model with module]

            if (!modu.models.includes(model.name)) modu.models.push(model.name);

            // #endregion

            // #region [set model field]

            model.fields = [];
            let fields = m.field.describe().children;
            for (let key in fields) {
                if (!fields.hasOwnProperty(key)) continue;
                let f = fields[key];
                let field = {};
                model.fields.push(field);

                field.name = key;
                field.description = f.description;
                field.type = f.type;
                field.allow_null = !!f.valids && f.valids.includes(null);

                if (f.fields && f.fields.default)
                    field.default = f.fields.default;
                else if (field.allow_null) field.default = null;

                let enum_values = f.valids
                    ? f.valids.filter(x => !['', null].includes(x))
                    : undefined;
                if (enum_values && enum_values.length > 0)
                    field.enum = enum_values;

                let min = f.rules
                    ? f.rules.find(x => x.name === 'min')
                    : undefined;
                if (min) field.min = min.arg;

                let max = f.rules
                    ? f.rules.find(x => x.name === 'max')
                    : undefined;
                if (max) field.max = max.arg;
            }

            // #endregion
        }
    }
};
