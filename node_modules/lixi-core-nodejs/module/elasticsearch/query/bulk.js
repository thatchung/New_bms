/** xử lý hàng loạt */

let Joi = require('../../joi/_index');

// #region [schema]

let schema_options = Joi.object({
    refresh: Joi.string()
        .valid('wait_for', 'true', 'false')
        .default('false')
        .description('các chế độ refresh document')
    // https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-refresh.html#docs-refresh
});
schema_options = schema_options.default(schema_options.validate({}).value);

// #endregion

module.exports = ({ elastic, query }) =>
    (query.bulk = async function(list_item, bulk_body_handler, options) {
        options = version = Joi.validateValue({ options }, schema_options);

        let bulk_body = [];
        for (let item of list_item) {
            let result = bulk_body_handler(item);

            switch (result.action) {
                case 'insert':
                    bulk_body.push({
                        index: {
                            _index: query._body.index,
                            _type: query._body.type,
                            _id: result.data.id
                        }
                    });
                    bulk_body.push(result.data);
                    break;

                case 'update':
                    bulk_body.push({
                        update: {
                            _index: query._body.index,
                            _type: query._body.type,
                            _id: result.data.id
                        }
                    });
                    bulk_body.push({ doc: result.data });
                    break;

                case 'delete':
                    bulk_body.push({
                        delete: {
                            _index: query._body.index,
                            _type: query._body.type,
                            _id: result.data.id
                        }
                    });
                    break;

                default:
                    throw Error(
                        `bulk action "${result.action}" is not support`
                    );
            }
        }

        let refresh;
        if (['true', 'wait_for'].includes(options.refresh)) refresh = true;
        else refresh = false;

        let response = (
            await elastic.client.bulk({
                refresh,
                body: bulk_body
            })
        ).body;

        if (response.errors) {
            let msgs = [];
            for (let item of response.items) {
                if (!item.index || !item.index.error) continue;
                msgs.push(item.index.error.reason);
            }

            throw new Error(msgs.join('\n'));
        }

        return response;
    });
