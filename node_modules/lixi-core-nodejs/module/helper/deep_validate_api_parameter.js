/** kiểm tra tham số đầu vào của api */

let TYPE_ALLOW = {
    path: ['boolean', 'number', 'string', 'timestamp'],
    header: ['boolean', 'number', 'string', 'timestamp', 'array'],
    query: ['boolean', 'number', 'string', 'timestamp', 'array'],
    body: ['boolean', 'number', 'string', 'timestamp', 'array', 'object', 'any']
};

function validate({ path, parameter, location }) {
    if (!/^[a-z0-9_.]+$/g.test(path)) {
        // eslint-disable-next-line max-len
        throw Error(
            `child "${path}" fails because [name of "${path}" is invalid "^[a-z0-9_.]+$" pattern]`
        );
    }

    let type_allow = TYPE_ALLOW[location];
    if (!type_allow.includes(parameter.type)) {
        // eslint-disable-next-line max-len
        throw Error(
            `child "${path}" fails because [type of "${path}" must be one of ${type_allow.join(
                ', '
            )}]`
        );
    }

    switch (parameter.type) {
        case 'array':
            if (!parameter.items || parameter.items.length !== 1) {
                throw Error(
                    `child "${path}" fails because ["${path}" must have 1 item type]`
                );
            }

            validate({
                path,
                parameter: parameter.items[0],
                location
            });
            break;

        case 'object':
            if (parameter.flags && parameter.flags.func === true) break;

            if (
                !parameter.children ||
                Object.keys(parameter.children).length <= 0
            ) {
                throw Error(
                    `child "${path}" fails because ["${path}" have at least 1 property]`
                );
            }

            for (let key in parameter.children) {
                if (!parameter.children.hasOwnProperty(key)) continue;

                validate({
                    path: path + '.' + key,
                    parameter: parameter.children[key],
                    location
                });
            }
            break;
    }
}

module.exports = validate;
