/** kiểm tra tham số của middleware */

let TYPE_ALLOW = [
    'boolean',
    'number',
    'string',
    'timestamp',
    'array',
    'object',
    'any'
];

function validate({ path, option }) {
    if (!/^[a-z0-9_.]+$/g.test(path)) {
        // eslint-disable-next-line max-len
        throw Error(
            `child "${path}" fails because [name of "${path}" is invalid "^[a-z0-9_.]+$" pattern]`
        );
    }

    if (!TYPE_ALLOW.includes(option.type)) {
        // eslint-disable-next-line max-len
        throw Error(
            `child "${path}" fails because [type of "${path}" must be one of ${TYPE_ALLOW.join(
                ', '
            )}]`
        );
    }

    switch (option.type) {
        case 'array':
            if (!option.items || option.items.length !== 1) {
                throw Error(
                    `child "${path}" fails because ["${path}" must have 1 item type]`
                );
            }

            validate({
                path,
                option: option.items[0]
            });
            break;

        case 'object':
            if (option.flags && option.flags.func === true) break;

            if (!option.children || Object.keys(option.children).length <= 0) {
                throw Error(
                    `child "${path}" fails because ["${path}" have at least 1 property]`
                );
            }

            for (let key in option.children) {
                if (!option.children.hasOwnProperty(key)) continue;

                validate({
                    path: path + '.' + key,
                    option: option.children[key]
                });
            }
            break;
    }
}

module.exports = validate;
