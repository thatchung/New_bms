/** đăng ký điểm giao tiếp */

let Joi = require('../../joi/_index');
let Axios = require('axios');

// #region [schema]

let schema_option = Joi.object({
    key: Joi.string()
        .required()
        .description('mã định danh'),
    host: Joi.string()
        .required()
        .description('host sẽ request'),
    path: Joi.string()
        .regex(/^\//, '"must starts with /"')
        .required()
        .description('path sẽ request'),
    method: Joi.string()
        .valid('GET', 'POST', 'PUT', 'DELETE')
        .required()
        .description('http method sử dụng'),
    header: Joi.object()
        .pattern(Joi.string(), Joi.string())
        .description('http header mặc định')
        .default({}),
    response_data_field: Joi.string()
        .default('data')
        .description('field chứa dữ liệu trong response'),
    response_error_field: Joi.string()
        .default('error')
        .description('field chứa lỗi trong response')
});
schema_option = schema_option.default(schema_option.validate({}).value);

// #endregion

module.exports = hub =>
    (hub.registerRest = function(options) {
        options = Joi.validateValue({ options }, schema_option);

        // #region [kiểm tra key tồn tại]

        if (hub.endpoints.some(x => x.key === options.key))
            throw Error(`hub endpoint "${options.key}" is already existed`);

        // #endregion

        // #region [khởi tạo endpoint]

        let endpoint = {
            key: options.key,
            protocol: 'rest',
            host: options.host,
            path: options.path,
            method: options.method,
            header: options.header,
            response_data_field: options.response_data_field,
            response_error_field: options.response_error_field
        };

        endpoint.client = Axios.create({
            baseURL: options.host + options.path,
            headers: options.header
        });

        // #endregion

        hub.endpoints.push(endpoint);
    });
