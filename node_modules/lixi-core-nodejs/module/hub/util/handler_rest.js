let Joi = require('../../joi/_index');
let { HttpError } = require('../../err/_index');

// #region [schema]

let schema_option = Joi.object({
    header: Joi.object()
        .pattern(Joi.string(), Joi.string())
        .description('các header sẽ truyền trong phiên request')
        .default({}),
    raw_response: Joi.boolean()
        .description('trả về đầy đủ response')
        .default(false)
});
schema_option = schema_option.default(schema_option.validate({}).value);

// #endregion

module.exports = async function(param, options) {
    // #region [chuẩn hóa input]

    if (param === undefined || param === null) param = {};
    if (typeof param !== 'object') throw Error('"param" must be object');

    options = Joi.validateValue({ options }, schema_option);

    // #endregion

    // #region [chuẩn bị gói tin]

    let input = {
        method: this.method,
        headers: Object.assign({}, this.header, options.header),
    };

    if (input.method === 'GET') input.params = param;
    else input.data = param;

    // #endregion

    try {
        let response = (await this.client.request(input)).data;
        if (options.raw_response) return response;
        return response[this.response_data_field];
    } catch (e) {
        // #region [lấy thông tin lỗi]

        let err;
        if (
            e.response &&
            e.response.data &&
            e.response.data[this.response_error_field]
        )
            err = e.response.data[this.response_error_field];
        else if (e.response && e.response.data) err = e.response.data;
        else if (e.response) err = e.response;
        else err = e;

        throw new HttpError({
            error: e,
            code: err.code || 'exception',
            mesasge: err.mesasge || err.msg,
            data: err.data || err,
            http_code: e.response && e.response.status ? e.response.status : 500
        });

        // #endregion
    }
};
