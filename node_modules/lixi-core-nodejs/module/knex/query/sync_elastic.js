/** đồng bộ dữ liệu với elastic */
/* eslint-disable max-len */

module.exports = ({ knex, query }) =>
    (query.syncElastic = async function(id, options, model, elasticsearch) {
        if (!model) model = knex.options.models[this._single.table];
        if (!elasticsearch) elasticsearch = knex.options.elasticsearch;
        if (!elasticsearch)
            throw new Error(
                `cannot sync with elasticsearch when elasticsearch client is undefined`
            );

        if (!Array.isArray(id)) id = [id];
        let list_data = await this.whereIn('id', id);

        if (options && options.refresh !== 'wait_for') {
            await elasticsearch
                .query()
                .index(this._single.table)
                .bulk(
                    list_data,
                    item => ({
                        action: 'insert',
                        data: elasticsearch.modelMap({
                            data: item,
                            model_field: model ? model.field : undefined,
                            model_elastic_map: model
                                ? model.elastic_model_map
                                : undefined
                        })
                    }),
                    options
                );
        } else {
            for (let data of list_data) {
                let es_data = elasticsearch.modelMap({
                    data,
                    model_field: model ? model.field : undefined,
                    model_elastic_map: model
                        ? model.elastic_model_map
                        : undefined
                });

                await elasticsearch
                    .query()
                    .index(this._single.table)
                    .insert(es_data, options);
            }
        }
    });
