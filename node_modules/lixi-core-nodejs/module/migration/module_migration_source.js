/** migration source dành cho module
 * @param {Array[string]} list_module danh sách các moudle
 * @returns {MigrationSource} migration source
 */

let Path = require('path');
let Fs = require('fs');

module.exports = expo =>
    (expo.ModuleMigrationSource = class {
        constructor({ list_module }) {
            this.list_module = list_module;
        }

        async getMigrations() {
            let modules = [];
            for (let module_path of this.list_module) {
                let path = Path.join(module_path, 'migration');
                if (!Fs.existsSync(path)) continue;

                let module_name = Path.basename(module_path);
                let files = Fs.readdirSync(path);
                for (let file_name of files) {
                    modules.push({
                        module: module_name,
                        file_name: file_name,
                        name: module_name + '/' + file_name,
                        path: Path.join(path, file_name)
                    });
                }
            }

            return modules.sort((a, b) =>
                a.file_name.localeCompare(b.file_name)
            );
        }

        getMigrationName(migration) {
            return migration.name;
        }

        getMigration(migration) {
            let migrate = require(migration.path);
            
            if (!migrate.up || !migrate.down) {
                throw Error(
                    `migration '${migration.path}' must have both up and down`
                );
            }

            return {
                up: async () =>
                    await migrate.up({ db: migrate.db, es: migrate.es }),
                down: async () =>
                    await migrate.down({ db: migrate.db, es: migrate.es }),
                config: { transaction: false }
            };
        }
    });
