let { Axios, Joi } = require('../../index');
let server;
let api;

beforeAll(async () => {
    server = await require('./_setup')();
    api = server.api;
    server = server.server;
});

afterAll(async () => {
    await require('./_teardown')(server);
});

test(`get test`, async () => {
    let data = 'test';

    let response = (
        await Axios({
            method: 'get',
            url: api + '/test',
            params: {
                data: data
            }
        })
    ).data;

    Joi.assert(response.meta.request_uuid, Joi.string().uuid());
    expect(response.meta.execution_time).toBeLessThanOrEqual(100);
    expect(response.meta.success).toEqual(true);

    expect(response.data.data).toEqual(data);
});

test(`get test path`, async () => {
    let id = 123;

    let response = (
        await Axios({
            method: 'get',
            url: api + '/test/' + id
        })
    ).data;

    Joi.assert(response.meta.request_uuid, Joi.string().uuid());
    expect(response.meta.execution_time).toBeLessThanOrEqual(100);
    expect(response.meta.success).toEqual(true);

    expect(response.data.id).toEqual(id);
});

test(`get paging`, async () => {
    let page = 123;
    let page_size = 45;
    let total = page * page_size;
    let page_count = Math.ceil(total / page_size);
    let can_next = page_count > 0 && page < page_count;
    let can_prev = page_count > 0 && page > 1;

    let items = [];
    for (let i = 1; i <= page_size; i++) {
        items.push(i);
    }

    let response = (
        await Axios({
            method: 'get',
            url: api + '/paging',
            params: {
                page: page,
                page_size: page_size
            }
        })
    ).data;

    Joi.assert(response.meta.request_uuid, Joi.string().uuid());
    expect(response.meta.execution_time).toBeLessThanOrEqual(100);
    expect(response.meta.success).toEqual(true);
    expect(response.meta.total).toEqual(total);
    expect(response.meta.page).toEqual(page);
    expect(response.meta.page_size).toEqual(page_size);
    expect(response.meta.page_count).toEqual(page_count);
    expect(response.meta.can_next).toEqual(can_next);
    expect(response.meta.can_prev).toEqual(can_prev);

    expect(response.data).toEqual(items);
});

test(`post calc`, async () => {
    let a = 7;
    let b = 3;
    let sum = a + b;
    let sub = a - b;

    let response = (
        await Axios({
            method: 'post',
            url: api + '/calc',
            data: {
                a: a,
                b: b
            }
        })
    ).data;

    Joi.assert(response.meta.request_uuid, Joi.string().uuid());
    expect(response.meta.execution_time).toBeLessThanOrEqual(100);
    expect(response.meta.success).toEqual(true);

    expect(response.data.sum).toEqual(sum);
    expect(response.data.sub).toEqual(sub);
});

test(`not found`, async () => {
    let response;
    try {
        response = (
            await Axios({
                method: 'post',
                url: api + '/test'
            })
        ).data;
    } catch (e) {
        response = e.response.data;
    }

    Joi.assert(response.meta.request_uuid, Joi.string().uuid());
    expect(response.meta.execution_time).toBeLessThanOrEqual(100);
    expect(response.meta.success).toEqual(false);

    expect(response.error.code).toEqual('endpoint_not_found');
    Joi.assert(response.error.message, Joi.string());
});

test(`bad request`, async () => {
    let a = '7a';
    let b = '3b';

    let response;
    try {
        response = (
            await Axios({
                method: 'post',
                url: api + '/calc',
                data: {
                    a: a,
                    b: b
                }
            })
        ).data;
    } catch (e) {
        response = e.response.data;
    }

    Joi.assert(response.meta.request_uuid, Joi.string().uuid());
    expect(response.meta.execution_time).toBeLessThanOrEqual(100);
    expect(response.meta.success).toEqual(false);

    expect(response.error.code).toEqual('bad_request');
    Joi.assert(response.error.message, Joi.string());
});
